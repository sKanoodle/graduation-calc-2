<h3>@DisplayStudent.LastName, @DisplayStudent.FirstName</h3>
@if (DisplayStudent != OriginalStudent)
{
    <button @onclick="ResetStudent">Zurücksetzen</button>
}
@foreach (var subject in RenderSettings.Subjects)
{
    @if (DisplayStudent.Grades.Select(g => g.Subject).Contains(subject.Subject))
    {
        <div>
            <span>@subject.Subject.T()</span>
            <input value="@DisplayStudent[subject.Subject].Value" @onchange="@(e => OnGradeChange(e, subject))" type="number" min="1" max="6" />
            @if (subject.CanBeAdvancedCourse)
            {
                @foreach (var course in new[]{AdvancedCourseDifferentiation.A, AdvancedCourseDifferentiation.B})
                {
                    <input type="radio" name="@subject.Subject.T()" id="@($"{subject.Subject.T()}-{course}")" value="@((int)course)"
                        @onchange="@(e => OnCourseChange(e, subject))" checked="@(DisplayStudent[subject.Subject].Course == course)" />
                    <label for="@($"{subject.Subject.T()}-{course}")">@course-Kurs</label>
                }
            }
        </div>
    }
}
@foreach (var diploma in Diplomas)
{
    <h4>@diploma.Name <span style="@($"color: {(diploma.IsAttained ? "green" : "red")};")">@($"({(diploma.IsAttained ? String.Empty : "nicht ")}erreicht)")</span></h4>
    @foreach (var info in diploma.Info)
    {
        <div style="color: green;">
            @info
        </div>
    }
    @foreach (var error in diploma.ReasonsForFailing)
    {
        <div style="color: red;">
            @error
        </div>
    }
    @foreach (var advice in diploma.Advice)
    {
        <div style="color: darkorange;">
            @advice
        </div>
    }
}

@code {
    [Parameter]
    public Student OriginalStudent { get; set; }

    [Parameter]
    public SubjectRenderSettings RenderSettings { get; set; }

    private Diploma.Diploma[] Diplomas;
    private Student DisplayStudent;

    private void OnGradeChange(ChangeEventArgs e, SubjectRenderSettings.SubjectRenderSetting setting)
    {
        OnChange(e, setting, grade => grade.WithValue(int.Parse(e.Value.ToString())));
    }

    private void OnCourseChange(ChangeEventArgs e, SubjectRenderSettings.SubjectRenderSetting setting)
    {
        OnChange(e, setting, grade => grade.WithCourse((AdvancedCourseDifferentiation)int.Parse(e.Value.ToString())));
    }

    private void OnChange(ChangeEventArgs e, SubjectRenderSettings.SubjectRenderSetting setting, Func<Grade, Grade> getNewGrade)
    {
        var grade = DisplayStudent[setting.Subject];
        DisplayStudent = DisplayStudent.WithGrade(getNewGrade(grade));
        UpdateDiplomas();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ResetStudent(null);
    }

    private void ResetStudent(MouseEventArgs e)
    {
        DisplayStudent = OriginalStudent;
        UpdateDiplomas();
        this.ShouldRender();
    }

    private void UpdateDiplomas()
    {
        Diplomas = new Diploma.Diploma[]
        {
            new Diploma.Bbr(DisplayStudent),
            new Diploma.Ebr(DisplayStudent),
            new Diploma.For(DisplayStudent),
            new Diploma.Forq(DisplayStudent),
        };
    }
}
